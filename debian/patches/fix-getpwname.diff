## Fix bug #301204.
## Originally 02-fix-getpwname.dpatch by Dmitry K. Butskoj
## See http://sourceforge.net/mailarchive/message.php?msg_id=9823204

Index: libpam-ssh-1.92/pam_ssh.c
===================================================================
--- libpam-ssh-1.92.orig/pam_ssh.c	2008-11-30 13:09:40.000000000 +0100
+++ libpam-ssh-1.92/pam_ssh.c	2008-11-30 13:17:06.000000000 +0100
@@ -206,15 +206,15 @@
 key_load_private_maybe(const char *path, const char *passphrase,
     char **commentp, int allow_blank)
 {
-        Key *key;
+	Key *key;
 
-        /* try loading the key with a blank passphrase */
-        key = key_load_private(path, "", commentp);
-        if (key)
-                return allow_blank && *passphrase == '\0' ? key : NULL;
+	/* try loading the key with a blank passphrase */
+	key = key_load_private(path, "", commentp);
+	if (key)
+		return allow_blank && *passphrase == '\0' ? key : NULL;
 
-        /* the private key's passphrase isn't blank */
-        return key_load_private(path, passphrase, commentp);
+	/* the private key's passphrase isn't blank */
+	return key_load_private(path, passphrase, commentp);
 }
 
 /*
@@ -264,7 +264,7 @@
 	}
 
 	/* save the key and comment to pass to ssh-agent in the session
-           phase */
+	   phase */
 
 	if (asprintf(&data_name, "ssh_private_key_%d", index) == -1) {
 		free(comment);
@@ -320,7 +320,7 @@
 			return PAM_SERVICE_ERR;
 		}
 		retval = pam_get_data(pamh, data_name,
-		    (const void **)(void *)&key);
+		                      (const void **)(void *)&key);
 		free(data_name);
 		if (retval != PAM_SUCCESS)
 			break;
@@ -330,7 +330,7 @@
 			return PAM_SERVICE_ERR;
 		}
 		retval = pam_get_data(pamh, data_name,
-		    (const void **)(void *)&comment);
+		                      (const void **)(void *)&comment);
 		free(data_name);
 		if (retval != PAM_SUCCESS)
 			break;
@@ -512,7 +512,7 @@
 
 PAM_EXTERN int
 pam_sm_authenticate(pam_handle_t *pamh, int flags __unused, int argc,
-    const char **argv)
+                    const char **argv)
 {
 	int allow_blank_passphrase;	/* allow blank passphrases? */
 	int authenticated;		/* user authenticated? */
@@ -530,7 +530,6 @@
 #endif
 	const char *pass;		/* passphrase */
 	const struct passwd *pwent;	/* user's passwd entry */
-	struct passwd *pwent_keep;	/* our own copy */
 	int retval;			/* from calls */
 	const char *user;		/* username */
 
@@ -567,7 +566,7 @@
 			PAM_OPT_KEYFILES:
 				if (!(kfspec = opt_arg(*argv))) {
 					pam_ssh_log(LOG_ERR,
-					    "invalid keyfile list");
+					            "invalid keyfile list");
 					return PAM_SERVICE_ERR;
 				}
 				break;
@@ -615,8 +614,8 @@
 	OpenSSL_add_all_algorithms(); /* required for DSA */
 
 	/* any key will authenticate us, but if we can decrypt all of the
-           specified keys, we'll do so here so we can cache them in the
-           session phase */
+	   specified keys, we'll do so here so we can cache them in the
+	   session phase */
 
 	if (asprintf(&dotdir, "%s/%s", pwent->pw_dir, SSH_CLIENT_DIR) == -1) {
 		pam_ssh_log(LOG_CRIT, "out of memory");
@@ -632,7 +631,7 @@
 	for (file = strtok(keyfiles, SEP_KEYFILES); file;
 	     file = strtok(NULL, SEP_KEYFILES))
 		if (auth_via_key(pamh, file, dotdir, pwent, pass,
-                    allow_blank_passphrase) == PAM_SUCCESS)
+		    allow_blank_passphrase) == PAM_SUCCESS)
 			authenticated = 1;
 	free(dotdir);
 	free(keyfiles);
@@ -641,22 +640,6 @@
 		return PAM_AUTH_ERR;
 	}
 
-	/* copy the passwd entry (in case successive calls are made) and
-           save it for the session phase */
-
-	if (!(pwent_keep = malloc(sizeof *pwent))) {
-		pam_ssh_log(LOG_CRIT, "out of memory");
-		openpam_restore_cred(pamh);
-		return PAM_SERVICE_ERR;
-	}
-	memcpy(pwent_keep, pwent, sizeof *pwent_keep);
-	if ((retval = pam_set_data(pamh, "ssh_passwd_entry", pwent_keep,
-	    ssh_cleanup)) != PAM_SUCCESS) {
-		free(pwent_keep);
-		openpam_restore_cred(pamh);
-		return retval;
-	}
-
 	openpam_restore_cred(pamh);
 	return PAM_SUCCESS;
 }
@@ -664,7 +647,7 @@
 
 PAM_EXTERN int
 pam_sm_setcred(pam_handle_t *pamh __unused, int flags __unused,
-    int argc __unused, const char **argv __unused)
+               int argc __unused, const char **argv __unused)
 {
 	return PAM_SUCCESS;
 }
@@ -672,7 +655,7 @@
 
 PAM_EXTERN int
 pam_sm_open_session(pam_handle_t *pamh, int flags __unused,
-    int argc __unused, const char **argv __unused)
+                    int argc __unused, const char **argv __unused)
 {
 	AuthenticationConnection *ac;	/* connection to ssh-agent */
 	char *agent_socket;		/* agent socket */
@@ -689,15 +672,17 @@
 	const char *tty_raw;		/* raw tty or display name */
 	char *tty_nodir;		/* tty without / chars */
 	int attempt;			/* No. of attempt to contact agent */
+	const char *user;		/* username */
 
 	log_init(MODULE_NAME, SYSLOG_LEVEL_ERROR, SYSLOG_FACILITY_AUTHPRIV, 0);
 
 	/* dump output of ssh-agent in ~/.ssh */
-	if ((retval = pam_get_data(pamh, "ssh_passwd_entry",
-	    (const void **)(void *)&pwent))
-	    != PAM_SUCCESS)
+	if ((retval = pam_get_user(pamh, &user, NULL)) != PAM_SUCCESS)
 		return retval;
 
+	if (!(user && (pwent = getpwnam(user)) && pwent->pw_dir && *pwent->pw_dir))
+		return PAM_SESSION_ERR;
+
 	retval = openpam_borrow_cred(pamh, pwent);
 	if (retval != PAM_SUCCESS && retval != PAM_PERM_DENIED) {
 		pam_ssh_log(LOG_ERR, "can't drop privileges: %m");
@@ -728,7 +713,7 @@
 	}
 
 	/* save the per-agent filename in case we want to delete it on
-           session close */
+	   session close */
 
 	if ((retval = pam_set_data(pamh, "ssh_agent_env_agent", per_agent,
 	    ssh_cleanup)) != PAM_SUCCESS) {
@@ -738,8 +723,8 @@
 	}
 
 	/* Try to create the per-agent file or open it for reading if it
-           exists.  If we can't do either, we won't try to link a
-           per-session filename later.  Start the agent if we can't open
+	   exists.  If we can't do either, we won't try to link a
+	   per-session filename later.  Start the agent if we can't open
 	   the file for reading. */
 
 	for ( attempt = 0; attempt < 2; ++attempt ) {
@@ -808,7 +793,7 @@
 	}
 
 	/* if we couldn't access the per-agent file, don't link a
-           per-session filename to it */
+	   per-session filename to it */
 
 	if (no_link) {
 		openpam_restore_cred(pamh);
@@ -816,7 +801,7 @@
 	}
 
 	/* the per-session file contains the display name or tty name as
-           well as the hostname */
+	   well as the hostname */
 
 	if ((retval = pam_get_item(pamh, PAM_TTY,
 	    (const void **)(void *)&tty_raw)) != PAM_SUCCESS) {
@@ -844,7 +829,7 @@
 	free(tty_nodir);
 
 	/* save the per-session filename so we can delete it on session
-           close */
+	   close */
 
 	if ((retval = pam_set_data(pamh, "ssh_agent_env_session", per_session,
 	    ssh_cleanup)) != PAM_SUCCESS) {
@@ -863,7 +848,7 @@
 
 PAM_EXTERN int
 pam_sm_close_session(pam_handle_t *pamh, int flags __unused,
-    int argc __unused, const char **argv __unused)
+                     int argc __unused, const char **argv __unused)
 {
 	const char *env_file;		/* ssh-agent environment */
 	pid_t pid;			/* ssh-agent process id */
@@ -871,11 +856,14 @@
 	const char *ssh_agent_pid;	/* ssh-agent pid string */
 	const struct passwd *pwent;	/* user's passwd entry */
 	struct stat sb;			/* to check st_nlink */
+	const char *user;		/* username */
 
-	if ((retval = pam_get_data(pamh, "ssh_passwd_entry",
-	    (const void **)(void *)&pwent)) != PAM_SUCCESS)
+	if ((retval = pam_get_user(pamh, &user, NULL)) != PAM_SUCCESS)
 		return retval;
 
+	if (!(user && (pwent = getpwnam(user)) && pwent->pw_dir && *pwent->pw_dir))
+		return PAM_SESSION_ERR;
+
 	retval = openpam_borrow_cred(pamh, pwent);
 	if (retval != PAM_SUCCESS && retval != PAM_PERM_DENIED) {
 		pam_ssh_log(LOG_ERR, "can't drop privileges: %m");
@@ -887,8 +875,8 @@
 		unlink(env_file);
 
 	/* Retrieve per-agent filename and check link count.  If it's
-           greater than unity, other sessions are still using this
-           agent. */
+	   greater than unity, other sessions are still using this
+	   agent. */
 
 	if (pam_get_data(pamh, "ssh_agent_env_agent",
 	    (const void **)(void *)&env_file)
@@ -912,7 +900,7 @@
 	}
 
 	/* Kill the agent.  SSH's ssh-agent does not have a -k option, so
-           just call kill(). */
+	   just call kill(). */
 
 	pid = atoi(ssh_agent_pid);
 	if (pid <= 0) {
@@ -933,7 +921,7 @@
 #if !HAVE_OPENPAM
 PAM_EXTERN int
 pam_sm_acct_mgmt(pam_handle_t *pamh __unused, int flags __unused,
-    int argc __unused, const char **argv __unused)
+                 int argc __unused, const char **argv __unused)
 {
 	return PAM_IGNORE;
 }
@@ -941,7 +929,7 @@
 
 PAM_EXTERN int
 pam_sm_chauthtok(pam_handle_t *pamh __unused, int flags __unused,
-    int argc __unused, const char **argv __unused)
+                 int argc __unused, const char **argv __unused)
 {
 	return PAM_IGNORE;
 }
