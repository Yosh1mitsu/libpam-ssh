## Respond to the debug option by putting debug information in the syslog.

## This code was put into the public domain by Jens Peter Secher <jps@debian.org>.

Index: libpam-ssh/pam_ssh.c
===================================================================
--- libpam-ssh.orig/pam_ssh.c	2009-03-29 18:13:36.000000000 +0200
+++ libpam-ssh/pam_ssh.c	2009-03-29 18:56:14.000000000 +0200
@@ -407,6 +407,7 @@
 		arg[1] = "-s";
 		arg[2] = NULL;
 		env[0] = NULL;
+		debug("Starting ssh-agent.");
 		execve(PATH_SSH_AGENT, arg, env);
 		pam_ssh_log(LOG_ERR, "%s: %m", PATH_SSH_AGENT);
 		_exit(127);
@@ -533,11 +534,10 @@
 	int retval;			/* from calls */
 	const char *user;		/* username */
 
-	log_init(MODULE_NAME, SYSLOG_LEVEL_ERROR, SYSLOG_FACILITY_AUTHPRIV, 0);
-
 	allow_blank_passphrase = 0;
 	keyfiles = kfspec = NULL;
 #if HAVE_OPENPAM
+	log_init(MODULE_NAME, SYSLOG_LEVEL_ERROR, SYSLOG_FACILITY_AUTHPRIV, 0);
 	if ((kfspec = openpam_get_option(pamh, PAM_OPT_KEYFILES_NAME))) {
 		if (!(kfspec = opt_arg(kfspec))) {
 			openpam_log(PAM_LOG_ERROR, "invalid keyfile list");
@@ -550,11 +550,20 @@
 #elif HAVE_PAM_STRUCT_OPTIONS || !HAVE_PAM_STD_OPTION
 	memset(&options, 0, sizeof options);
 	pam_std_option(&options, other_options, argc, argv);
+	/* Set LOG level to DEBUG if 'debug' option is given to module. */
+	if (pam_test_option(&options, PAM_OPT_DEBUG, NULL)) {
+		log_init(MODULE_NAME, SYSLOG_LEVEL_DEBUG2,
+		         SYSLOG_FACILITY_AUTHPRIV, 0);
+		debug("Authentication debugging.");
+	} else
+		log_init(MODULE_NAME, SYSLOG_LEVEL_ERROR,
+		         SYSLOG_FACILITY_AUTHPRIV, 0);
 	if (!pam_test_option(&options, PAM_OPT_KEYFILES, &kfspec))
 		kfspec = DEF_KEYFILES;
 	allow_blank_passphrase =
 		pam_test_option(&options, PAM_OPT_BLANK_PASSPHRASE, NULL);
 #else
+	log_init(MODULE_NAME, SYSLOG_LEVEL_ERROR, SYSLOG_FACILITY_AUTHPRIV, 0);
 	options = 0;
 	for (; argc; argc--, argv++) {
 		struct opttab *p;
@@ -655,7 +664,7 @@
 
 PAM_EXTERN int
 pam_sm_open_session(pam_handle_t *pamh, int flags __unused,
-                    int argc __unused, const char **argv __unused)
+                    int argc, const char **argv)
 {
 	AuthenticationConnection *ac;	/* connection to ssh-agent */
 	char *agent_socket;		/* agent socket */
@@ -674,7 +683,19 @@
 	int attempt;			/* No. of attempt to contact agent */
 	const char *user;		/* username */
 
+#if HAVE_PAM_STRUCT_OPTIONS || !HAVE_PAM_STD_OPTION
+	struct options options;
+	memset(&options, 0, sizeof options);
+	pam_std_option(&options, other_options, argc, argv);
+	/* Set LOG level to DEBUG if 'debug' option given to module. */
+	if (pam_test_option(&options, PAM_OPT_DEBUG, NULL)) {
+		log_init(MODULE_NAME, SYSLOG_LEVEL_DEBUG2, SYSLOG_FACILITY_AUTHPRIV, 0);
+		debug("Session debugging.");
+	} else
+		log_init(MODULE_NAME, SYSLOG_LEVEL_ERROR, SYSLOG_FACILITY_AUTHPRIV, 0);
+#else
 	log_init(MODULE_NAME, SYSLOG_LEVEL_ERROR, SYSLOG_FACILITY_AUTHPRIV, 0);
+#endif
 
 	/* dump output of ssh-agent in ~/.ssh */
 	if ((retval = pam_get_user(pamh, &user, NULL)) != PAM_SUCCESS)
Index: libpam-ssh/authfile.c
===================================================================
--- libpam-ssh.orig/authfile.c	2009-03-29 18:13:26.000000000 +0200
+++ libpam-ssh/authfile.c	2009-03-29 18:13:36.000000000 +0200
@@ -316,7 +316,7 @@
 	}
 	pk = PEM_read_PrivateKey(fp, NULL, NULL, (char *)passphrase);
 	if (pk == NULL) {
-		debug("PEM_read_PrivateKey failed");
+		debug2("PEM_read_PrivateKey failed");
 		(void)ERR_get_error();
 	} else if (pk->type == EVP_PKEY_RSA &&
 	    (type == KEY_UNSPEC||type==KEY_RSA)) {
@@ -350,7 +350,7 @@
 		EVP_PKEY_free(pk);
 	if (prv != NULL && commentp)
 		*commentp = xstrdup(name);
-	debug("read PEM private key done: type %s",
+	debug2("read PEM private key done: type %s",
 	    prv ? key_type(prv) : "<unknown>");
 	return prv;
 }
